Index: /trunk/Source/JavaScriptCore/API/JSBase.h
===================================================================
--- /trunk/Source/JavaScriptCore/API/JSBase.h	(revision 172531)
+++ /trunk/Source/JavaScriptCore/API/JSBase.h	(revision 172532)
@@ -33,5 +33,17 @@
 #ifdef __OBJC__
 #import <Foundation/Foundation.h>
+
+#if defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE
+#if __has_include(<Foundation/NSMapTablePriv.h>)
+#import <Foundation/NSMapTablePriv.h>
+#else
+extern "C" {
+    void *NSMapGet(NSMapTable *, const void *key);
+    void NSMapInsert(NSMapTable *, const void *key, const void *value);
+    void NSMapRemove(NSMapTable *, const void *key);
+}
 #endif
+#endif // defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE
+#endif // __OBJC__
 
 /* JavaScript engine interface */
Index: /trunk/Source/JavaScriptCore/ChangeLog
===================================================================
--- /trunk/Source/JavaScriptCore/ChangeLog	(revision 172531)
+++ /trunk/Source/JavaScriptCore/ChangeLog	(revision 172532)
@@ -1,2 +1,20 @@
+2014-08-13  Daniel Bates  <dabates@apple.com>
+
+        [iOS] Make JavaScriptCore and bmalloc build with the public SDK
+        https://bugs.webkit.org/show_bug.cgi?id=135848
+
+        Reviewed by Geoffrey Garen.
+
+        * API/JSBase.h: Declare NSMap functions with external linkage when building for iOS without the
+        header <Foundation/NSMapTablePriv.h>.
+        * inspector/remote/RemoteInspector.mm: Define XPC functions with external linkage when building
+        without the system header <xpc/xpc.h>.
+        * inspector/remote/RemoteInspectorXPCConnection.h: Define xpc_connection_t and xpc_object_t when building
+        without the system header <xpc/xpc.h>.
+        * inspector/remote/RemoteInspectorXPCConnection.mm: Declare XPC functions with external linkage when
+        building without without the system header <xpc/xpc.h>.
+        (Inspector::RemoteInspectorXPCConnection::closeOnQueue): Fix code style; use nullptr instead of NULL.
+        (Inspector::RemoteInspectorXPCConnection::sendMessage): Ditto.
+
 2014-08-12  Peyton Randolph  <prandolph@apple.com>
 
Index: /trunk/Source/JavaScriptCore/inspector/remote/RemoteInspectorXPCConnection.h
===================================================================
--- /trunk/Source/JavaScriptCore/inspector/remote/RemoteInspectorXPCConnection.h	(revision 172531)
+++ /trunk/Source/JavaScriptCore/inspector/remote/RemoteInspectorXPCConnection.h	(revision 172532)
@@ -32,5 +32,11 @@
 #import <mutex>
 #import <wtf/ThreadSafeRefCounted.h>
+
+#if __has_include(<xpc/xpc.h>)
 #import <xpc/xpc.h>
+#else
+typedef void* xpc_connection_t;
+typedef void* xpc_object_t;
+#endif
 
 OBJC_CLASS NSDictionary;
Index: /trunk/Source/JavaScriptCore/inspector/remote/RemoteInspectorXPCConnection.mm
===================================================================
--- /trunk/Source/JavaScriptCore/inspector/remote/RemoteInspectorXPCConnection.mm	(revision 172531)
+++ /trunk/Source/JavaScriptCore/inspector/remote/RemoteInspectorXPCConnection.mm	(revision 172532)
@@ -33,9 +33,36 @@
 #import <wtf/Ref.h>
 
+#if !__has_include(<xpc/xpc.h>)
+extern "C" {
+    typedef void (^xpc_handler_t)(xpc_object_t);
+    void xpc_connection_cancel(xpc_connection_t);
+    void xpc_connection_resume(xpc_connection_t);
+    void xpc_connection_send_message(xpc_connection_t, xpc_object_t message);
+    void xpc_connection_set_event_handler(xpc_connection_t, xpc_handler_t);
+    void xpc_connection_set_target_queue(xpc_connection_t, dispatch_queue_t);
+
+    xpc_object_t xpc_retain(xpc_object_t);
+    void xpc_release(xpc_object_t);
+
+    typedef void* xpc_type_t;
+    xpc_type_t xpc_get_type(xpc_object_t);
+
+    void* XPC_ERROR_CONNECTION_INVALID;
+    void* XPC_TYPE_DICTIONARY;
+    void* XPC_TYPE_ERROR;
+
+    xpc_object_t xpc_dictionary_create(const char* const* keys, const xpc_object_t* values, size_t count);
+    xpc_object_t xpc_dictionary_get_value(xpc_object_t, const char* key);
+    void xpc_dictionary_set_value(xpc_object_t, const char* key, xpc_object_t value);
+}
+#endif
+
 #if __has_include(<CoreFoundation/CFXPCBridge.h>)
 #import <CoreFoundation/CFXPCBridge.h>
 #else
-extern "C" xpc_object_t _CFXPCCreateXPCMessageWithCFObject(CFTypeRef);
-extern "C" CFTypeRef _CFXPCCreateCFObjectFromXPCMessage(xpc_object_t);
+extern "C" {
+    xpc_object_t _CFXPCCreateXPCMessageWithCFObject(CFTypeRef);
+    CFTypeRef _CFXPCCreateCFObjectFromXPCMessage(xpc_object_t);
+}
 #endif
 
@@ -97,10 +124,10 @@
         xpc_connection_cancel(m_connection);
         xpc_release(m_connection);
-        m_connection = NULL;
+        m_connection = nullptr;
     }
 
     if (m_queue) {
         dispatch_release(m_queue);
-        m_queue = NULL;
+        m_queue = nullptr;
     }
 }
@@ -171,5 +198,5 @@
         return;
 
-    xpc_object_t msg = xpc_dictionary_create(NULL, NULL, 0);
+    xpc_object_t msg = xpc_dictionary_create(nullptr, nullptr, 0);
     xpc_dictionary_set_value(msg, RemoteInspectorXPCConnectionSerializedMessageKey, xpcDictionary);
     xpc_release(xpcDictionary);
Index: /trunk/Source/JavaScriptCore/inspector/remote/RemoteInspector.mm
===================================================================
--- /trunk/Source/JavaScriptCore/inspector/remote/RemoteInspector.mm	(revision 172531)
+++ /trunk/Source/JavaScriptCore/inspector/remote/RemoteInspector.mm	(revision 172532)
@@ -38,5 +38,13 @@
 #import <wtf/NeverDestroyed.h>
 #import <wtf/text/WTFString.h>
+
+#if __has_include(<xpc/xpc.h>)
 #import <xpc/xpc.h>
+#else
+extern "C" {
+    xpc_connection_t xpc_connection_create_mach_service(const char* name, dispatch_queue_t, uint64_t flags);
+    void xpc_release(xpc_object_t);
+}
+#endif
 
 #if PLATFORM(IOS)
Index: /trunk/Source/bmalloc/ChangeLog
===================================================================
--- /trunk/Source/bmalloc/ChangeLog	(revision 172531)
+++ /trunk/Source/bmalloc/ChangeLog	(revision 172532)
@@ -1,2 +1,18 @@
+2014-08-13  Daniel Bates  <dabates@apple.com>
+
+        [iOS] Make JavaScriptCore and bmalloc build with the public SDK
+        https://bugs.webkit.org/show_bug.cgi?id=135848
+
+        Reviewed by Geoffrey Garen.
+
+        * bmalloc/BPlatform.h: Added macro BPLATFORM_IOS_SIMULATOR, which evaluates to true
+        when building for the iOS Simulator.
+        * bmalloc/PerThread.h: Use pthread_machdep.h code path when building for iOS Simulator
+        using the public SDK.
+        (_pthread_setspecific_direct): Added; only defined when building for the iOS Simulator
+        using the public SDK.
+        (_pthread_getspecific_direct): Added; only defined when building for the iOS Simulator
+        using the public SDK.
+
 2014-08-12  Daniel Bates  <dabates@apple.com>
 
Index: /trunk/Source/bmalloc/bmalloc/PerThread.h
===================================================================
--- /trunk/Source/bmalloc/bmalloc/PerThread.h	(revision 172531)
+++ /trunk/Source/bmalloc/bmalloc/PerThread.h	(revision 172532)
@@ -27,4 +27,5 @@
 #define PerThread_h
 
+#include "BPlatform.h"
 #include "Inline.h"
 #include <mutex>
@@ -32,4 +33,13 @@
 #if defined(__has_include) && __has_include(<System/pthread_machdep.h>)
 #include <System/pthread_machdep.h>
+#elif BPLATFORM(IOS_SIMULATOR)
+// FIXME: We shouldn't hardcode this constant as it can become out-of-date with the macro define of the same
+// name in System/pthread_machdep.h. Instead, we should make PerThread work without C++ thread local storage.
+// See <https://bugs.webkit.org/show_bug.cgi?id=135895> for more details.
+const pthread_key_t __PTK_FRAMEWORK_JAVASCRIPTCORE_KEY0 = 90;
+
+INLINE int _pthread_setspecific_direct(pthread_key_t key, const void* value) { return pthread_setspecific(key, value); }
+INLINE void* _pthread_getspecific_direct(pthread_key_t key) { return pthread_getspecific(key); }
+extern "C" int pthread_key_init_np(int, void (*destructor)(void*));
 #endif
 
@@ -54,6 +64,5 @@
 template<typename T> struct PerThreadStorage;
 
-#if defined(__has_include) && __has_include(<System/pthread_machdep.h>)
-
+#if (defined(__has_include) && __has_include(<System/pthread_machdep.h>)) || BPLATFORM(IOS_SIMULATOR)
 // For now, we only support PerThread<Cache>. We can expand to other types by
 // using more keys.
@@ -91,5 +100,5 @@
 template<typename T> std::once_flag PerThreadStorage<T>::onceFlag;
 
-#endif // defined(__has_include) && __has_include(<System/pthread_machdep.h>)
+#endif // (defined(__has_include) && __has_include(<System/pthread_machdep.h>)) || BPLATFORM(IOS_SIMULATOR)
 
 template<typename T>
Index: /trunk/Source/bmalloc/bmalloc/BPlatform.h
===================================================================
--- /trunk/Source/bmalloc/bmalloc/BPlatform.h	(revision 172531)
+++ /trunk/Source/bmalloc/bmalloc/BPlatform.h	(revision 172532)
@@ -39,3 +39,7 @@
 #endif
 
+#if defined(TARGET_IPHONE_SIMULATOR) && TARGET_IPHONE_SIMULATOR
+#define BPLATFORM_IOS_SIMULATOR 1
+#endif
+
 #endif // BPlatform_h
