package com.appcelerator.javascriptcore;

public class HyperloopJavaMethodInvoker implements ExternalMethodInvoker {

    public HyperloopJavaMethodInvoker() {}

    /************************************************************/
    /** JNI METHODS ID GENERATED BY HYPERLOOP COMPILER - START **/
    /************************************************************/

    /*
     * Selecting method call from id. method id should be integer and should be sorted
     * because we want to use tableswitch instruction rather than lookupswitch for faster switch.
     * See 3.10. Compiling Switches section in JVM Spec  http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-3.html
     *
     * Hyperloop compiler needs to generate the method id (which is unique in the app) AOT
     * and generate these switch call depending on the argument count and return type.
     *
     */
    public void CallVoidMethod0(int methodId, Object self) {
        switch (methodId) {
            default: throw new JavaScriptCoreException(String.format("Failed to invoke: method does not found: id:%d", methodId));
        }
    }
    public void CallVoidMethod1(int methodId, Object self, Object arg1) {
        switch (methodId) {
            case -2147483643: ((java.io.PrintStream)self).println(arg1); break;
            default: throw new JavaScriptCoreException(String.format("Failed to invoke: method does not found: id:%d", methodId));
        }
    }
    public void CallVoidMethod2(int methodId, Object self, Object arg1, Object arg2) {
        switch (methodId) {
            default: throw new JavaScriptCoreException(String.format("Failed to invoke: method does not found: id:%d", methodId));
        }
    }
    public long CallLongMethod0(int methodId, Object self) {
        switch (methodId) {
            case -2147483647: return ((java.util.Date)self).getTime();
            default: throw new JavaScriptCoreException(String.format("Failed to invoke: method does not found: id:%d", methodId));
        }
    }
    public Object CallObject0(int methodId) {
        switch (methodId) {
            case -2147483648: return new java.util.Date();
            case -2147483645: return java.lang.System.out;
            case -2147483642: return new java.io.FileNotFoundException();
            default: throw new JavaScriptCoreException(String.format("Failed to invoke: method does not found: id:%d", methodId));
        }
    }
    public Object CallObject1(int methodId, Object arg1) throws Exception {
        switch (methodId) {
            case -2147483644: return new java.io.PrintStream((String)arg1);
            default: throw new JavaScriptCoreException(String.format("Failed to invoke: method does not found: id:%d", methodId));
        }
    }
    public Object CallObjectMethod0(int methodId, Object self) {
        switch (methodId) {
            case -2147483646: return ((java.util.Date)self).toString();
            default: throw new JavaScriptCoreException(String.format("Failed to invoke: method does not found: id:%d", methodId));
        }
    }
    /*******************************************************/
    /** JNI METHODS GENERATED BY HYPERLOOP COMPILER - END **/
    /*******************************************************/

}
